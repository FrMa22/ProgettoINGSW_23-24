@startuml
scale 3
package com.example.progettoingsw.backendAPI{
    interface AcquirenteService {
            +logInAcquirente(indirizzo_email: String, password: String): Call<AcquirenteDTO>
            +loginAcquirenteConToken(token: String): Call<AcquirenteDTO>
            +findCategorieByIndirizzoEmailAcquirente(indirizzo_email: String): Call<ArrayList<String>>
            +updateAcquirente(acquirenteDTO: AcquirenteDTO): Call<Void>
            +updatePasswordAcquirente(password: String, indirizzo_email: String): Call<Void>
            +registrazioneAcquirenteDoppio(indirizzo_email: String): Call<AcquirenteDTO>
            +setTokenAcquirente(indirizzo_email: String, token: String): Call<Integer>
            +saveAcquirente(acquirenteDTO: AcquirenteDTO): Call<Long>
            +saveCategorieAcquirente(email: String, lista_categorie: ArrayList<String>): Call<Void>
            +removeTokenFromAcquirente(indirizzo_email: String): Call<Integer>
            +getAcquirenteByIndirizzo_email(indirizzo_email: String): Call<AcquirenteDTO>
    }
    interface Asta_allingleseService {
            +getAste_allingleseScadenzaRecente(): Call<ArrayList<Asta_allinglese_DTO>>
            +getAste_allingleseNuove(): Call<ArrayList<Asta_allinglese_DTO>>
            +getAste_allingleseCategoriaNome(nomiCategorie: ArrayList<String>): Call<ArrayList<Asta_allinglese_DTO>>
            +getAste_allingleseApertaByEmail(indirizzo_email: String): Call<List<Asta_allinglese_DTO>>
            +getAste_allingleseChiusaByEmail(indirizzo_email: String): Call<List<Asta_allinglese_DTO>>
            +partecipaAsta_allinglese(idAstaInglese: Long, indirizzo_email: String, offerta: String, tempo_offerta: String, stato: String): Call<Integer>
            +trovaAstaInglese(idAstaInglese: Long): Call<Asta_allinglese_DTO>
            +verificaAstaIngleseInPreferiti(indirizzo_email: String, idAstaInglese: Long): Call<Integer>
            +inserimentoAstaInPreferiti(idAstaInglese: Long, indirizzo_email: String): Call<Integer>
            +eliminazioneAstaInPreferiti(idAstaInglese: Long, indirizzo_email: String): Call<Integer>
            +getAsteInglesePreferite(indirizzo_email: String): Call<ArrayList<Asta_allinglese_DTO>>
            +getAste_allinglesePartecipateByEmail(indirizzo_email: String): Call<ArrayList<Asta_allinglese_DTO>>
            +saveAsta_inglese(asta_allinglese_dto: Asta_allinglese_DTO, lista_categorie: ArrayList<String>): Call<Long>
            +getEmailVincente(indirizzo_email: String, idAstaInglese: Long): Call<Boolean>
            +getAstePerRicerca(nome: String, ordinamento: String, nomiCategorie: ArrayList<String>): Call<ArrayList<Asta_allinglese_DTO>>
        }
        interface Asta_alribassoService {
                +getAste_alribassoNuove(): Call<ArrayList<Asta_alribasso_DTO>>
                +getAste_alribassoCategoriaNome(nomiCategorie: ArrayList<String>): Call<ArrayList<Asta_alribasso_DTO>>
                +getAste_alribassoApertaByEmail(indirizzo_email: String): Call<List<Asta_alribasso_DTO>>
                +getAste_alribassoChiusaByEmail(indirizzo_email: String): Call<List<Asta_alribasso_DTO>>
                +acquistaAstaAlRibasso(idAstaAlRibasso: Long, indirizzo_email: String, prezzoAcquisto: String): Call<Integer>
                +trovaAstaRibasso(idAstaRibasso: Long): Call<Asta_alribasso_DTO>
                +verificaAstaAlRibassoInPreferiti(indirizzo_email: String, idAstaRibasso: Long): Call<Integer>
                +inserimentoAstaInPreferiti(idAstaRibasso: Long, indirizzo_email: String): Call<Integer>
                +eliminazioneAstaInPreferiti(idAstaRibasso: Long, indirizzo_email: String): Call<Integer>
                +getAsteRibassoPreferite(indirizzo_email: String): Call<ArrayList<Asta_alribasso_DTO>>
                +saveAsta_ribasso(asta_ribasso_dto: Asta_alribasso_DTO, lista_categorie: ArrayList<String>): Call<Long>
                +getAstePerRicerca(nome: String, ordinamento: String, nomiCategorie: ArrayList<String>): Call<ArrayList<Asta_alribasso_DTO>>
        }
        interface Asta_inversaService {
                +getAste_inversaScadenzaRecente(): Call<ArrayList<Asta_inversa_DTO>>
                +getAste_inversaNuove(): Call<ArrayList<Asta_inversa_DTO>>
                +getAste_inversaCategoriaNome(nomiCategorie: ArrayList<String>): Call<ArrayList<Asta_inversa_DTO>>
                +getAste_inversaApertaByEmail(indirizzo_email: String): Call<List<Asta_inversa_DTO>>
                +getAste_inversaPartecipateByEmail(indirizzo_email: String): Call<ArrayList<Asta_inversa_DTO>>
                +getAste_inversaChiusaByEmail(indirizzo_email: String): Call<List<Asta_inversa_DTO>>
                +partecipaAsta_inversa(idAstaInversa: Long, indirizzo_email: String, offerta: String, tempo_offerta: String, stato: String): Call<Integer>
                +trovaAstaInversa(idAstaInversa: Long): Call<Asta_inversa_DTO>
                +verificaAstaInversaInPreferiti(indirizzo_email: String, idAstaInversa: Long): Call<Integer>
                +inserimentoAstaInPreferiti(idAstaInversa: Long, indirizzo_email: String): Call<Integer>
                +eliminazioneAstaInPreferiti(idAstaInversa: Long, indirizzo_email: String): Call<Integer>
                +getAsteInversaPreferite(indirizzo_email: String): Call<ArrayList<Asta_inversa_DTO>>
                +saveAsta_inversa(asta_inversa_dto: Asta_inversa_DTO, lista_categorie: ArrayList<String>): Call<Long>
                +getEmailVincente(indirizzo_email: String, idAstaInversa: Long): Call<Boolean>
                +getAstePerRicerca(nome: String, ordinamento: String, nomiCategorie: ArrayList<String>): Call<ArrayList<Asta_inversa_DTO>>
        }
        interface NotificheService {
                +getNotificheAcquirente(idAcquirente: String): Call<ArrayList<NotificheAcquirente_DTO>>
                +getNotificheVenditore(idVenditore: String): Call<ArrayList<NotificheVenditore_DTO>>
                +deleteNotificheAcquirente(id: Long): Call<Integer>
                +deleteNotificheVenditore(id: Long): Call<Integer>
                +getNumeroNotificheAcquirente(indirizzo_email: String): Call<Integer>
                +getNumeroNotificheVenditore(indirizzo_email: String): Call<Integer>
        }
        interface SocialAcquirenteService {
                +findSocialAcquirente(indirizzo_email: String): Call<List<SocialAcquirenteDTO>>
                +insertSocialAcquirente(nome: String, link: String, indirizzo_email: String): Call<SocialAcquirenteDTO>
                +deleteSocialAcquirente(nome: String, link: String, indirizzo_email: String): Call<Void>
                +updateSocialAcquirente(oldNome: String, oldLink: String, newNome: String, newLink: String): Call<Void>
                +insertSocialAcquirenteRegistrazione(listaSocialDTO: ArrayList<SocialAcquirenteDTO>): Call<Void>
        }
        interface SocialVenditoreService {
                +findSocialVenditore(indirizzo_email: String): Call<List<SocialVenditoreDTO>>
                +insertSocialVenditore(nome: String, link: String, indirizzo_email: String): Call<SocialVenditoreDTO>
                +deleteSocialVenditore(nome: String, link: String, indirizzo_email: String): Call<Void>
                +updateSocialVenditore(oldNome: String, oldLink: String, newNome: String, newLink: String): Call<Void>
                +insertSocialVenditoreRegistrazione(listaSocialDTO: ArrayList<SocialVenditoreDTO>): Call<Void>
        }
        interface VenditoreService {
                +logInVenditore(indirizzo_email: String, password: String): Call<VenditoreDTO>
                +loginVenditoreConToken(token: String): Call<VenditoreDTO>
                +findCategorieByIndirizzoEmailVenditore(indirizzo_email: String): Call<ArrayList<String>>
                +registrazioneVenditoreDoppio(indirizzo_email: String): Call<VenditoreDTO>
                +updateVenditore(venditoreDTO: VenditoreDTO): Call<Void>
                +updatePasswordVenditore(password: String, indirizzo_email: String): Call<Void>
                +saveVenditore(venditoreDTO: VenditoreDTO): Call<Long>
                +saveCategorieVenditore(email: String, lista_categorie: ArrayList<String>): Call<Void>
                +setTokenVenditore(indirizzo_email: String, token: String): Call<Integer>
                +removeTokenFromVenditore(indirizzo_email: String): Call<Integer>
                +getVenditoreByIndirizzo_email(indirizzo_email: String): Call<VenditoreDTO>
        }
}

@enduml