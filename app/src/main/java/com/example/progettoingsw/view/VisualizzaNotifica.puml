@startuml
scale 3
package com.example.progettoingsw.view{
    class SchermataNotifiche {
        - SchermataNotificheViewModel schermataNotificheViewModel
        - ImageButton bottoneBackNotifiche
        - NotificheAdapter adapterNotifiche
        - ProgressBar progressBarSchermataNotifiche
        - TextView text_view_nessuna_notifica
        - SwipeRefreshLayout swipe_refresh_layout_notifiche
        + void onCreate(Bundle savedInstanceState)
        + void onResume()
        + void onPopupDismissed()
        - void osservaIsAcquirente()
        - void osservaNotificheAcquirente()
        - void osservaNotificheVenditore()
        - void osservaNotificheAssenti()
        - void osservaVaiInNotificaPopUp()
    }
    class PopUpNotifiche {
        - PopupDismissListener popupDismissListener
        - Button buttonCancella
        - Button buttonChiudi
        - TextView textViewTitolo
        - TextView textViewCommento
        - FragmentActivity fragmentActivity
        - PopUpNotificheViewModel popUpNotificheViewModel
        + PopUpNotifiche(Context context, FragmentActivity activity, PopUpNotifiche.PopupDismissListener dismissListener)
        + onCreate(savedInstanceState: Bundle): void
        + onClick(v: View): void
        + dismissPopup(): void
        + osservaErroreEliminazione(): void
        + osservaImpostaDatiNotificaAcquirente(): void
        + osservaImpostaDatiNotificaVenditore(): void
        + osservaNotificaEliminata(): void
        + interface PopupDismissListener {
        void onPopupDismissed()
        }

}
package com.example.progettoingsw.controllers_package {
    class NotificheAdapter {
        -static final int TIPO_NOTIFICA_ACQUIRENTE
        -static final int TIPO_NOTIFICA_VENDITORE
        -Context context
        -ArrayList<NotificheAcquirenteModel> notificheAcquirenteItemList
        -ArrayList<NotificheVenditoreModel> notificheVenditoreItemList
        -View.OnClickListener mItemClickListener
        +NotificheAdapter(Context context)
        +setOnItemClickListener(View.OnClickListener listener)
        +clearItems()
        +onCreateViewHolder(ViewGroup parent, int viewType): RecyclerView.ViewHolder
        +onBindViewHolder(RecyclerView.ViewHolder holder, int position)
        +onItemClick(Object notifica, int position)
        +getItemCount(): int
        +getItemViewType(int position): int
        +getClickedNotificaAcquirente(int position): NotificheAcquirenteModel
        +getClickedNotificaVenditore(int position): NotificheVenditoreModel
        +setNotificheAcquirente(ArrayList<NotificheAcquirenteModel> notificheList)
        +setNotificheVenditore(ArrayList<NotificheVenditoreModel> notificheList)
        +NotificaAcquirenteViewHolder
        +NotificaVenditoreViewHolder
    }
}
package com.example.progettoingsw.model{
    class NotificheAcquirenteModel {
        - Long id
        - String titolo
        - String commento
        - String idAcquirente
        + NotificheAcquirenteModel()
        + NotificheAcquirenteModel(Long id, String titolo, String commento, String idAcquirente)
        + getId(): Long
        + setId(Long id): void
        + getTitolo(): String
        + setTitolo(String titolo): void
        + getCommento(): String
        + setCommento(String commento): void
        + getIdAcquirente(): String
        + setIdAcquirente(String idAcquirente): void
    }
    class NotificheVenditoreModel {
        - Long id
        - String titolo
        - String commento
        - String idVenditore
        + NotificheVenditoreModel()
        + NotificheVenditoreModel(Long id, String titolo, String commento, String idVenditore)
        + getId(): Long
        + setId(Long id): void
        + getTitolo(): String
        + setTitolo(String titolo): void
        + getCommento(): String
        + setCommento(String commento): void
        + getIdVenditore(): String
        + setIdVenditore(String idVenditore): void
    }
}

package com.example.progettoingsw.repository{
    class Repository {
        - acquirenteModel: AcquirenteModel
        - listaCategorieAcquirente: ArrayList<String>
        - venditoreModel: VenditoreModel
        - socialAcquirenteModelList: List<SocialAcquirenteModel>
        - socialVenditoreModelList: List<SocialVenditoreModel>
        - acquirenteEmailDaAsta: String
        - venditoreEmailDaAsta: String
        - nomeSocialSelezionato: String
        - nomeLinkSelezionato: String
        - leMieAsteUtenteAttuale: Boolean
        - listaSocialAcquirenteRecuperati: ArrayList<SocialAcquirenteModel>
        - listaSocialVenditoreRecuperati: ArrayList<SocialVenditoreModel>
        - listaCategorieVenditore: ArrayList<String>
        - categoriaSelezionata: String
        - backendUrl: String
        - questaRepository: Repository
        - listaAsteAllIngleseInScadenza: ArrayList<Asta_allingleseModel>
        - listaAsteAllIngleseCategoriaNome: ArrayList<Asta_allingleseModel>
        - listaAsteAllIngleseNuove: ArrayList<Asta_allingleseModel>
        - listaAsteAlRibassoCategoriaNome: ArrayList<Asta_alribassoModel>
        - listaAsteAlRibassoNuove: ArrayList<Asta_alribassoModel>
        - listaAsteInversaInScadenza: ArrayList<Asta_inversaModel>
        - listaAsteInversaCategoriaNome: ArrayList<Asta_inversaModel>
        - listaAsteInversaNuove: ArrayList<Asta_inversaModel>
        - notificaAcquirenteScelta: NotificheAcquirenteModel
        - notificaVenditoreScelta: NotificheVenditoreModel
        - nome_socialAcquirenteSelezionato: String
        - link_socialAcquirenteSelezionato: String
        - asta_allingleseSelezionata: Asta_allingleseModel
        - asta_alribassoSelezionata: Asta_alribassoModel
        - asta_inversaSelezionata: Asta_inversaModel
        + getInstance(): Repository
        + deleteRepository(): void
    }
    class NotificheRepository {
        - GetNotificheAcquirenteTask
        - OnGetNotificheAcquirenteListener listener
        - GetNotificheVenditoreTask
        - OnGetNotificheVenditoreListener listener
        - DeleteNotificheAcquirenteTask
        - OnDeleteNotificheAcquirenteListener listener
        - DeleteNotificheVenditoreTask
        - OnDeleteNotificheVenditoreListener listener
        - GetNumeroNotificheAcquirenteTask
        - OnGetNumeroNotificheAcquirenteListener listener
        - GetNumeroNotificheVenditoreTask
        - OnGetNumeroNotificheVenditoreListener listener
        + getNotificheAcquirente(String indirizzo_email, OnGetNotificheAcquirenteListener listener): void
        + getNotificheVenditore(String indirizzo_email, OnGetNotificheVenditoreListener listener): void
        + deleteNotificheAcquirente(Long id, OnDeleteNotificheAcquirenteListener listener): void
        + deleteNotificheVenditore(Long id, OnDeleteNotificheVenditoreListener listener): void
        + getNumeroNotificheAcquirente(String indirizzo_email, OnGetNumeroNotificheAcquirenteListener listener): void
        + getNumeroNotificheVenditore(String indirizzo_email, OnGetNumeroNotificheVenditoreListener listener): void
    }

}
package com.example.progettoingsw.viewmodel{
    class SchermataNotificheViewModel {
        - Repository repository
        - NotificheRepository notificheRepository
        - MutableLiveData<Boolean> isAcquirente
        - MutableLiveData<Boolean> notificheAssenti
        - MutableLiveData<Boolean> vaiInNotificaPopUp
        - MutableLiveData<ArrayList<NotificheAcquirenteModel>> notificheAcquirenteRecuperate
        - MutableLiveData<ArrayList<NotificheVenditoreModel>> notificheVenditoreRecuperate
        + SchermataNotificheViewModel()
        + setIsAcquirente(Boolean b): void
        + getTipoUtente(): void
        + getNotificheAcquirente(): void
        + getNotificheVenditore(): void
        + setNotificheAssenti(Boolean b): void
        + setNotificheAcquirenteRecuperate(ArrayList<NotificheAcquirenteModel> lista): void
        + isNotificheAcquirenteRecuperate(): Boolean
        + setNotificheVenditoreRecuperate(ArrayList<NotificheVenditoreModel> lista): void
        + isNotificheVenditoreRecuperate(): Boolean
        + setVaiInNotificaPopUp(Boolean b): void
        + onItemCLick(int position): void
        + gestisciClickRecyclerView(RecyclerView recyclerView, NotificheAdapter notificheAdapter, View v): void
    }
    class PopUpNotificheViewModel {
        - Repository repository
        - NotificheRepository notificheRepository
        - MutableLiveData<NotificheAcquirenteModel> impostaDatiNotificaAcquirente
        - MutableLiveData<NotificheVenditoreModel> impostaDatiNotificaVenditore
        - MutableLiveData<Boolean> notificaEliminata
        - MutableLiveData<String> erroreEliminazione
        + PopUpNotificheViewModel()
        + getImpostaDatiNotificaAcquirente(): NotificheAcquirenteModel
        + setImpostaDatiNotificaAcquirente(notifica: NotificheAcquirenteModel): void
        + getImpostaDatiNotificaVenditore(): NotificheVenditoreModel
        + setImpostaDatiNotificaVenditore(notifica: NotificheVenditoreModel): void
        + getNotificaData(): void
        + getNotificaEliminata(): Boolean
        + setNotificaEliminata(b: Boolean): void
        + getErroreEliminazione(): String
        + setErroreEliminazione(messaggio: String): void
        + isErroreEliminazione(): Boolean
        + eliminaNotifica(): void
    }
}
SchermataNotifiche --> SchermataNotificheViewModel
SchermataNotifiche --> NotificheAdapter
SchermataNotifiche --> PopUpNotifiche

NotificheAdapter --> NotificheAcquirenteModel
NotificheAdapter --> NotificheVenditoreModel

SchermataNotificheViewModel --> NotificheAdapter
SchermataNotificheViewModel --> NotificheAcquirenteModel
SchermataNotificheViewModel --> NotificheVenditoreModel
SchermataNotificheViewModel --> NotificheRepository
SchermataNotificheViewModel --> Repository

PopUpNotifiche --> PopUpNotificheViewModel

PopUpNotificheViewModel --> NotificheAcquirenteModel
PopUpNotificheViewModel --> NotificheVenditoreModel
PopUpNotificheViewModel --> Repository
PopUpNotificheViewModel --> NotificheRepository

NotificheRepository --> NotificheAcquirenteModel
NotificheRepository --> NotificheVenditoreModel


@enduml