@startuml
left to right direction
package com.example.progettoingsw.view {
    class LoginActivity {
        - switch_mostra_password: SwitchCompat
        - progress_bar_login: ProgressBar
        - editText_mail: EditText
        - editText_password: EditText
        - checkbox_ricordami: CheckBox
        - loginViewModel: LoginViewModel
        - relative_layout_login_activity: RelativeLayout
        - token: String
        - sharedPreferences: SharedPreferences
        - firebaseAnalytics: FirebaseAnalytics
        + onCreate(savedInstanceState: Bundle): void
        + checkConnessione(): void
        + requestNotificationPermissions(): void
        + onRequestPermissionsResult(requestCode: int, permissions: String[],
         grantResults: int[]): void
        + checkNotificationPermissions(): void
        + messaggioErroreMail(messaggio: String): void
        + messaggioErrorePassword(messaggio: String): void
        + osservaMessaggioErroreEmail(): void
        + osservaMessaggioErrorePassword(): void
        + salvaTokenInLocale(): void
        + osservaProseguiLogin(): void
        + showAccountSelectionPopup(): void
        + osservaMessaggioUtenteNonTrovato(): void
        + osservaTokenSalvato(): void
        + osservaConnessioneSpenta(): void
        + showPopUpConnessioneSpenta(): void
    }
     class MainActivity{
                - bottomNavigationView: BottomNavigationView
                - mainActivityViewModel: MainActivityViewModel
                - selectedFragment: Fragment
                - homeMenuItem: MenuItem
                - categoriesMenuItem: MenuItem
                - creaAstaMenuItem: MenuItem
                - searchMenuItem: MenuItem
                - profileMenuItem: MenuItem
                + onCreate(savedInstanceState: Bundle): void
                + enableBottomNavigationView(enabled: boolean): void
                + resetOtherIcons(bottomNavigationView: BottomNavigationView,
                 selectedItem: MenuItem): void
                + getIconResource(itemId: int): int
                + osservaSceltoHome(): void
                + osservaSceltoCategorie(): void
                + osservaSceltoCreaAstaAcquirente(): void
                + osservaSceltoCreaAstaVenditore(): void
                + osservaSceltoRicerca(): void
                + osservaSceltoProfilo(): void
            }
}

package com.example.progettoingsw.viewmodel {
class LoginViewModel {
    - messaggioErrorePassword: MutableLiveData<String>
    - messaggioErroreEmail: MutableLiveData<String>
    - messaggioUtenteNonTrovato: MutableLiveData<String>
    - proseguiLogin: MutableLiveData<String>
    - tokenSalvato: MutableLiveData<String>
    - connessioneSpenta: MutableLiveData<Boolean>
    - token: String
    - tokenViewModel: String
    - loginRepository: LoginRepository
    - repository: Repository
    - TOKEN_KEY: String
    + LoginViewModel()
    + checkSavedToken(context: Context)
    + loginAcquirenteConToken(token: String)
    + trovaCategorieAcquirenteConToken(indirizzo_email: String)
    + loginVenditoreConToken()
    + trovaCategorieVenditoreConToken(indirizzo_email: String)
    + loginAcquirente(email: String, password: String, token: String)
    + loginVenditore(email: String, password: String)
    + generaFCMToken(): String
    + isProseguiLogin(tipo: String): Boolean
    + sceltoTipoAccount(tipo: String)
    + mandaTokenAcquirenteBackend(email: String, token: String)
    + mandaTokenVenditoreBackend(email: String, token: String)
    + trovaAcquirente(email: String, password: String)
    + trovaCategorieAcquirente(email: String, password: String)
    + trovaVenditore(email: String, password: String)
    + trovaCategorieVenditore(email: String)
    + loginValido(mail: String, password: String): Boolean
    + isNuovoMessaggioErroreEmail(): Boolean
    + isNuovoMessaggioErrorePassword(): Boolean
    + isMessaggioUtenteNonTrovato(): Boolean
    + isNessunUtenteTrovatoConToken(): Boolean
}

package com.example.progettoingsw.repository {
class Repository {
    - acquirenteModel: AcquirenteModel
    - listaCategorieAcquirente: ArrayList<String>
    - venditoreModel: VenditoreModel
    - socialAcquirenteModelList: List<SocialAcquirenteModel>
    - socialVenditoreModelList: List<SocialVenditoreModel>
    - acquirenteEmailDaAsta: String
    - venditoreEmailDaAsta: String
    - nomeSocialSelezionato: String
    - nomeLinkSelezionato: String
    - leMieAsteUtenteAttuale: Boolean
    - listaSocialAcquirenteRecuperati: ArrayList<SocialAcquirenteModel>
    - listaSocialVenditoreRecuperati: ArrayList<SocialVenditoreModel>
    - listaCategorieVenditore: ArrayList<String>
    - categoriaSelezionata: String
    - backendUrl: String
    - questaRepository: Repository
    - listaAsteAllIngleseInScadenza: ArrayList<Asta_allingleseModel>
    - listaAsteAllIngleseCategoriaNome: ArrayList<Asta_allingleseModel>
    - listaAsteAllIngleseNuove: ArrayList<Asta_allingleseModel>
    - listaAsteAlRibassoCategoriaNome: ArrayList<Asta_alribassoModel>
    - listaAsteAlRibassoNuove: ArrayList<Asta_alribassoModel>
    - listaAsteInversaInScadenza: ArrayList<Asta_inversaModel>
    - listaAsteInversaCategoriaNome: ArrayList<Asta_inversaModel>
    - listaAsteInversaNuove: ArrayList<Asta_inversaModel>
    - notificaAcquirenteScelta: NotificheAcquirenteModel
    - notificaVenditoreScelta: NotificheVenditoreModel
    - nome_socialAcquirenteSelezionato: String
    - link_socialAcquirenteSelezionato: String
    - asta_allingleseSelezionata: Asta_allingleseModel
    - asta_alribassoSelezionata: Asta_alribassoModel
    - asta_inversaSelezionata: Asta_inversaModel
    + getInstance(): Repository
    + deleteRepository(): void
}
    class LoginRepository {
            - OnLoginAcquirenteListener listener
            - OnRecuperaCategorieAcquirenteListener listener
            - OnSetTokenAcquirenteListener listener
            - OnLoginVenditoreListener listener
            - OnRecuperaCategorieVenditoreListener listener
            - OnSetTokenVenditoreListener listener
            - OnLoginAcquirenteConTokenListener listener
            - OnLoginVenditoreConTokenListener listener
            - class LoginAcquirenteTask
            - class RecuperaCategorieAcquirenteTask
            - class SetTokenAcquirenteTask
            - class LoginVenditoreTask
            - class RecuperaCategorieVenditoreTask
            - class SetTokenVenditoreTask
            - class LoginAcquirenteConTokenTask
            - class LoginVenditoreConTokenTask

            + loginAcquirenteBackend(email: String, password: String, listener: OnLoginAcquirenteListener): void
            + loginAcquirenteConTokenBackend(token: String, listener: OnLoginAcquirenteConTokenListener): void
            + recuperaCategorieAcquirenteBackend(email: String, listener: OnRecuperaCategorieAcquirenteListener): void
            + setTokenAcquirente(email: String, token: String, listener: OnSetTokenAcquirenteListener): void
            + loginVenditoreBackend(email: String, password: String, listener: OnLoginVenditoreListener): void
            + loginVenditoreConTokenBackend(token: String, listener: OnLoginVenditoreConTokenListener): void
            + recuperaCategorieVenditoreBackend(email: String, listener: OnRecuperaCategorieVenditoreListener): void
            + setTokenVenditore(email: String, token: String, listener: OnSetTokenVenditoreListener): void
        }
}
}
package com.example.progettoingsw.model {
    class AcquirenteModel {
        - String indirizzo_email
        - String nome
        - String cognome
        - String password
        - String bio
        - String link
        - String areageografica

        + AcquirenteModel(nome: String, cognome: String, indirizzo_email: String,
         password: String, bio: String, areageografica: String, link: String)
        + getIndirizzo_email(): String
        + setIndirizzo_email(indirizzo_email: String): void
        + getNome(): String
        + setNome(nome: String): void
        + getCognome(): String
        + setCognome(cognome: String): void
        + getPassword(): String
        + setPassword(password: String): void
        + getBio(): String
        + setBio(bio: String): void
        + getLink(): String
        + setLink(link: String): void
        + getAreageografica(): String
        + setAreageografica(areageografica: String): void
    }
    class VenditoreModel {
            - String indirizzo_email
            - String nome
            - String cognome
            - String password
            - String bio
            - String link
            - String areageografica

            + VenditoreModel(nome: String, cognome: String, indirizzo_email: String,
             password: String, bio: String, areageografica: String, link: String)
            + getIndirizzo_email(): String
            + setIndirizzo_email(indirizzo_email: String): void
            + getNome(): String
            + setNome(nome: String): void
            + getCognome(): String
            + setCognome(cognome: String): void
            + getPassword(): String
            + setPassword(password: String): void
            + getBio(): String
            + setBio(bio: String): void
            + getLink(): String
            + setLink(link: String): void
            + getAreageografica(): String
            + setAreageografica(areageografica: String): void
        }


}
LoginActivity --> LoginViewModel
LoginActivity --> MainActivity
LoginViewModel --> Repository
LoginViewModel --> LoginRepository
LoginViewModel --> AcquirenteModel
LoginViewModel --> VenditoreModel

@enduml